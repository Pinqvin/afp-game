/// Implementation for utility functions

#include <SFML/Graphics/Sprite.hpp>
#include <SFML/Graphics/Text.hpp>

#include <AFP/Utility.hpp>
#include <AFP/Animation/Animation.hpp>

#include <cmath>

/// Centers sprite origin
void AFP::centerOrigin(sf::Sprite& sprite)
{
    sf::FloatRect bounds = sprite.getLocalBounds();
    sprite.setOrigin(bounds.width / 2.f, bounds.height / 2.f);

}

/// Centers sprite origin
void AFP::centerOrigin(Animation& animation)
{
    sf::FloatRect bounds = animation.getLocalBounds();
    animation.setOrigin(std::floor(bounds.width / 2.f), std::floor(bounds.height / 2.f));

}

/// Centers text origin
void AFP::centerOrigin(sf::Text& text)
{
    sf::FloatRect bounds = text.getLocalBounds();
    text.setOrigin(bounds.width / 2.f, bounds.height / 2.f);

}

std::string AFP::toString(sf::Keyboard::Key key)
{
	#define AFP_KEYTOSTRING_CASE(KEY) case sf::Keyboard::KEY: return #KEY;

	switch (key)
	{
		AFP_KEYTOSTRING_CASE(Unknown)
		AFP_KEYTOSTRING_CASE(A)
		AFP_KEYTOSTRING_CASE(B)
		AFP_KEYTOSTRING_CASE(C)
		AFP_KEYTOSTRING_CASE(D)
		AFP_KEYTOSTRING_CASE(E)
		AFP_KEYTOSTRING_CASE(F)
		AFP_KEYTOSTRING_CASE(G)
		AFP_KEYTOSTRING_CASE(H)
		AFP_KEYTOSTRING_CASE(I)
		AFP_KEYTOSTRING_CASE(J)
		AFP_KEYTOSTRING_CASE(K)
		AFP_KEYTOSTRING_CASE(L)
		AFP_KEYTOSTRING_CASE(M)
		AFP_KEYTOSTRING_CASE(N)
		AFP_KEYTOSTRING_CASE(O)
		AFP_KEYTOSTRING_CASE(P)
		AFP_KEYTOSTRING_CASE(Q)
		AFP_KEYTOSTRING_CASE(R)
		AFP_KEYTOSTRING_CASE(S)
		AFP_KEYTOSTRING_CASE(T)
		AFP_KEYTOSTRING_CASE(U)
		AFP_KEYTOSTRING_CASE(V)
		AFP_KEYTOSTRING_CASE(W)
		AFP_KEYTOSTRING_CASE(X)
		AFP_KEYTOSTRING_CASE(Y)
		AFP_KEYTOSTRING_CASE(Z)
		AFP_KEYTOSTRING_CASE(Num0)
		AFP_KEYTOSTRING_CASE(Num1)
		AFP_KEYTOSTRING_CASE(Num2)
		AFP_KEYTOSTRING_CASE(Num3)
		AFP_KEYTOSTRING_CASE(Num4)
		AFP_KEYTOSTRING_CASE(Num5)
		AFP_KEYTOSTRING_CASE(Num6)
		AFP_KEYTOSTRING_CASE(Num7)
		AFP_KEYTOSTRING_CASE(Num8)
		AFP_KEYTOSTRING_CASE(Num9)
		AFP_KEYTOSTRING_CASE(Escape)
		AFP_KEYTOSTRING_CASE(LControl)
		AFP_KEYTOSTRING_CASE(LShift)
		AFP_KEYTOSTRING_CASE(LAlt)
		AFP_KEYTOSTRING_CASE(LSystem)
		AFP_KEYTOSTRING_CASE(RControl)
		AFP_KEYTOSTRING_CASE(RShift)
		AFP_KEYTOSTRING_CASE(RAlt)
		AFP_KEYTOSTRING_CASE(RSystem)
		AFP_KEYTOSTRING_CASE(Menu)
		AFP_KEYTOSTRING_CASE(LBracket)
		AFP_KEYTOSTRING_CASE(RBracket)
		AFP_KEYTOSTRING_CASE(SemiColon)
		AFP_KEYTOSTRING_CASE(Comma)
		AFP_KEYTOSTRING_CASE(Period)
		AFP_KEYTOSTRING_CASE(Quote)
		AFP_KEYTOSTRING_CASE(Slash)
		AFP_KEYTOSTRING_CASE(BackSlash)
		AFP_KEYTOSTRING_CASE(Tilde)
		AFP_KEYTOSTRING_CASE(Equal)
		AFP_KEYTOSTRING_CASE(Dash)
		AFP_KEYTOSTRING_CASE(Space)
		AFP_KEYTOSTRING_CASE(Return)
		AFP_KEYTOSTRING_CASE(BackSpace)
		AFP_KEYTOSTRING_CASE(Tab)
		AFP_KEYTOSTRING_CASE(PageUp)
		AFP_KEYTOSTRING_CASE(PageDown)
		AFP_KEYTOSTRING_CASE(End)
		AFP_KEYTOSTRING_CASE(Home)
		AFP_KEYTOSTRING_CASE(Insert)
		AFP_KEYTOSTRING_CASE(Delete)
		AFP_KEYTOSTRING_CASE(Add)
		AFP_KEYTOSTRING_CASE(Subtract)
		AFP_KEYTOSTRING_CASE(Multiply)
		AFP_KEYTOSTRING_CASE(Divide)
		AFP_KEYTOSTRING_CASE(Left)
		AFP_KEYTOSTRING_CASE(Right)
		AFP_KEYTOSTRING_CASE(Up)
		AFP_KEYTOSTRING_CASE(Down)
		AFP_KEYTOSTRING_CASE(Numpad0)
		AFP_KEYTOSTRING_CASE(Numpad1)
		AFP_KEYTOSTRING_CASE(Numpad2)
		AFP_KEYTOSTRING_CASE(Numpad3)
		AFP_KEYTOSTRING_CASE(Numpad4)
		AFP_KEYTOSTRING_CASE(Numpad5)
		AFP_KEYTOSTRING_CASE(Numpad6)
		AFP_KEYTOSTRING_CASE(Numpad7)
		AFP_KEYTOSTRING_CASE(Numpad8)
		AFP_KEYTOSTRING_CASE(Numpad9)
		AFP_KEYTOSTRING_CASE(F1)
		AFP_KEYTOSTRING_CASE(F2)
		AFP_KEYTOSTRING_CASE(F3)
		AFP_KEYTOSTRING_CASE(F4)
		AFP_KEYTOSTRING_CASE(F5)
		AFP_KEYTOSTRING_CASE(F6)
		AFP_KEYTOSTRING_CASE(F7)
		AFP_KEYTOSTRING_CASE(F8)
		AFP_KEYTOSTRING_CASE(F9)
		AFP_KEYTOSTRING_CASE(F10)
		AFP_KEYTOSTRING_CASE(F11)
		AFP_KEYTOSTRING_CASE(F12)
		AFP_KEYTOSTRING_CASE(F13)
		AFP_KEYTOSTRING_CASE(F14)
		AFP_KEYTOSTRING_CASE(F15)
		AFP_KEYTOSTRING_CASE(Pause)
	}

	return "";
}

std::string AFP::toString(sf::Mouse::Button button)
{
	#define AFP_BUTTONTOSTRING_CASE(BUTTON) case sf::Mouse::BUTTON: return #BUTTON;

	switch (button)
	{
		AFP_BUTTONTOSTRING_CASE(Left)
		AFP_BUTTONTOSTRING_CASE(Middle)
		AFP_BUTTONTOSTRING_CASE(Right)
		AFP_BUTTONTOSTRING_CASE(XButton1)
		AFP_BUTTONTOSTRING_CASE(XButton2)
	}

	return "";
}
